# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.4.2-node-browsers
         environment:
           RAILS_ENV: test
           PGHOST: 127.0.0.1
           PGUSER: root

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
       - image: circleci/postgres:9.4
         environment:
           POSTGRES_USER: root
           POSTGRES_DB: cd-app_test

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      # Database setup
      - run:
          name: Set up DB
          command: |
            bundle exec rake db:create
            bundle exec rake db:schema:load
          environment:
      #      DATABASE_URL: "postgres://ubuntu@localhost:5432/cd-app_test"

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  deploy:
    docker:
      - run:
          name: Set up AWS credentials
          command: |
          mkdir ~/.aws && printf "[profile eb-cli]\naws_access_key_id =
          ${AWS_ACCESS_KEY_ID}\naws_secret_access_key =
          ${AWS_SECRET_ACCESS_KEY}" > ~/.aws/config
      - deploy:
          name: Deploy to Elastic Beanstalk
          command: |
            eb deploy test
